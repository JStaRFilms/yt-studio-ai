import { GoogleGenAI } from "@google/genai";

// Per guidelines, initialize with a named apiKey parameter from process.env.
const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

/**
 * Rewrites a given piece of text based on a user's instruction using the Gemini API.
 * @param instruction - The instruction for rewriting (e.g., "make this more engaging").
 * @param textToRewrite - The text to be rewritten.
 * @returns The rewritten text as a string.
 */
export const generateRewrite = async (instruction: string, textToRewrite: string): Promise<string> => {
    try {
        const response = await ai.models.generateContent({
            // Per guidelines, use 'gemini-2.5-flash' for general text tasks.
            model: "gemini-2.5-flash",
            contents: `Instruction: "${instruction}"\n\nText to rewrite:\n"${textToRewrite}"`,
            config: {
                systemInstruction: "You are an expert script editor. Rewrite the provided text based on the user's instruction. Only return the rewritten text, without any introductory phrases, explanations, or markdown formatting.",
            },
        });
        // Per guidelines, extract text directly from `response.text`.
        return response.text.trim();
    } catch (error) {
        console.error("Error generating rewrite:", error);
        // Per guidelines, implement robust error handling.
        throw new Error("Failed to generate rewrite. Please check your API key and network connection.");
    }
};

/**
 * Generates an image based on a text prompt using the Gemini API.
 * @param prompt - The text prompt for image generation.
 * @returns A base64 encoded string of the generated JPEG image.
 */
export const generateImage = async (prompt: string): Promise<string> => {
    try {
        const response = await ai.models.generateImages({
            // Per guidelines, use 'imagen-4.0-generate-001' for image generation.
            model: 'imagen-4.0-generate-001',
            prompt: prompt,
            config: {
                numberOfImages: 1,
                outputMimeType: 'image/jpeg',
                aspectRatio: '16:9',
            },
        });

        if (response.generatedImages && response.generatedImages.length > 0) {
            // Per guidelines, extract image bytes from `response.generatedImages[0].image.imageBytes`.
            return response.generatedImages[0].image.imageBytes;
        } else {
            throw new Error("No image was generated by the API.");
        }
    } catch (error) {
        console.error("Error generating image:", error);
        // Per guidelines, implement robust error handling.
        throw new Error("Failed to generate image. Please check your API key and the prompt.");
    }
};
